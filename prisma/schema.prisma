// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Clinic {
  id          String   @id @default(cuid())
  name        String
  cnpj        String?  @unique
  address     String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamento com usuários
  users         User[]
  patients      Patient[]
  profissionals Profissional[]
  appointments  Appointment[]
  
  @@map("clinics")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String   @unique
  name        String?
  role        UserRole @default(USER)
  clinicId    String?
  clinic      Clinic?  @relation(fields: [clinicId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("users")
}

model Patient {
  id            String        @id @default(cuid())
  name          String
  cpf           String        @unique
  phone         String?
  email         String?
  address       String?
  status        PatientStatus @default(AGENDADO)
  lastConsult   DateTime?
  appointments  Appointment[]
  clinicId      String
  clinic        Clinic        @relation(fields: [clinicId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("patients")
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  USER
}

model Profissional {
  id                String              @id @default(cuid())
  name              String
  phone             String?
  email             String              @unique
  crm               String              @unique
  image             String?
  specialty         String?
  consultationPrice Float?
  workingDays       ProfissionalDay[]
  appointments      Appointment[]
  clinicId          String
  clinic            Clinic              @relation(fields: [clinicId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("profissionals")
}

model ProfissionalDay {
  id             String       @id @default(cuid())
  dayOfWeek      Int          // 0 = Domingo, 1 = Segunda, ..., 6 = Sábado
  startTime      String       // Formato HH:mm
  endTime        String       // Formato HH:mm
  profissionalId String
  profissional   Profissional @relation(fields: [profissionalId], references: [id], onDelete: Cascade)
  
  @@map("profissional_days")
}

model Appointment {
  id             String            @id @default(cuid())
  date           DateTime          // Data do agendamento
  time           String            // Horário no formato HH:mm
  duration       Int               @default(30) // Duração em minutos
  status         AppointmentStatus @default(AGENDADO)
  notes          String?           // Observações
  patientId      String
  patient        Patient           @relation(fields: [patientId], references: [id])
  profissionalId String
  profissional   Profissional      @relation(fields: [profissionalId], references: [id])
  clinicId       String
  clinic         Clinic            @relation(fields: [clinicId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  @@map("appointments")
}

enum PatientStatus {
  AGENDADO
  CONFIRMADO
  CANCELADO
  FINALIZADO
}

enum AppointmentStatus {
  AGENDADO
  CONFIRMADO
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
}